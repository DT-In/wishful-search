/**
 * Most of this file - except for this comment -
 * is generated by the LLM.
 */

import { DDLTable } from '../src/index';
import { loadMovies } from './movies';

export function stringifyMovie(movie: Movie) {
  // Nicely template the name, adult type, budget, genres, language, companies, release date, languages, and tagline into a short string.
  return `${movie.title} (${
    movie.tagline
  }): ${
    movie.adult === 'True' ? 'adult' : 'non-adult'
  } movie, budget $${movie.budget}, released ${
    movie.release_date ? new Date(movie.release_date).toLocaleDateString() : ''
  } in ${movie.original_language}. Genres: ${movie.genres.map((g) => g.name).join(', ')}. Produced by: ${movie.production_companies.map((c) => c.name).join(', ')}.`;
}

export type Movie = {
  adult: string;
  budget: string;
  genres: Array<{
    id: number;
    name: string;
  }>;
  id: string;
  imdb_id: string;
  original_language: string;
  original_title: string;
  overview: string;
  popularity: string;
  production_companies: Array<{
    name: string;
    id: number;
  }>;
  production_countries: Array<{
    iso_3166_1: string;
    name: string;
  }>;
  release_date: string;
  revenue: string;
  runtime: string;
  spoken_languages: Array<{
    iso_639_1: string;
    name: string;
  }>;
  status: string;
  tagline: string;
  title: string;
  vote_average: string;
  vote_count: string;
};

export async function getMovies() {
  return (await loadMovies()) as Movie[];
}

// pretter-ignore
export const MOVIES_DDL: DDLTable[] = [
  {
    name: "Movies",
    columns: [
      {
        name: "id",
        columnSpec: "TEXT",
        description: "",
        visibleToLLM: true,
      },
      {
        name: "adult",
        columnSpec: "TEXT",
        staticExamples: ["True", "False"],
        description: "",
        visibleToLLM: true,
      },
      {
        name: "budget",
        columnSpec: "INTEGER",
        description: "",
        visibleToLLM: true,
      },
      {
        name: "imdb_id",
        columnSpec: "TEXT",
        description: "",
        visibleToLLM: true,
      },
      {
        name: "original_language",
        columnSpec: "TEXT",
        description: "",
        visibleToLLM: true,
        dynamicEnumSettings: {
          type: "EXHAUSTIVE",
          topK: 10
        },
      },
      {
        name: "original_title",
        columnSpec: "TEXT",
        description: "",
        visibleToLLM: true,
      },
      {
        name: "overview",
        columnSpec: "TEXT",
        description: "",
        visibleToLLM: true,
      },
      {
        name: "popularity",
        columnSpec: "REAL",
        description: "",
        visibleToLLM: true,
        dynamicEnumSettings: {
          type: "MIN_MAX",
          format: "NUMBER"
        },
      },
      {
        name: "release_date",
        columnSpec: "TEXT",
        description: "",
        visibleToLLM: true,
      },
      {
        name: "revenue",
        columnSpec: "INTEGER",
        description: "",
        visibleToLLM: true,
        dynamicEnumSettings: {
          type: "MIN_MAX",
          format: "NUMBER"
        }
      },
      {
        name: "runtime",
        columnSpec: "REAL",
        description: "",
        visibleToLLM: true,
        dynamicEnumSettings: {
          type: "MIN_MAX",
          format: "NUMBER"
        }
      },
      {
        name: "status",
        columnSpec: "TEXT",
        description: "",
        visibleToLLM: true,
        dynamicEnumSettings: {
          type: "EXHAUSTIVE",
          topK: 10
        }
      },
      {
        name: "tagline",
        columnSpec: "TEXT",
        description: "",
        visibleToLLM: true,
      },
      {
        name: "title",
        columnSpec: "TEXT",
        description: "",
        visibleToLLM: true,
      },
      {
        name: "vote_average",
        columnSpec: "REAL",
        description: "",
        visibleToLLM: true,
        dynamicEnumSettings: {
          type: "MIN_MAX",
          format: "NUMBER"
        }
      },
      {
        name: "vote_count",
        columnSpec: "INTEGER",
        description: "",
        visibleToLLM: true,
        dynamicEnumSettings: {
          type: "MIN_MAX",
          format: "NUMBER"
        }
      },
    ],
  },
  {
    name: "Genres",
    columns: [
      {
        name: "movie_id",
        columnSpec: "TEXT",
        description: "",
        foreignKey: {
          table: "Movies",
          column: "id",
        },
        visibleToLLM: true,
      },
      {
        name: "genre_id",
        columnSpec: "INTEGER",
        description: "",
        visibleToLLM: true,
      },
      {
        name: "genre_name",
        columnSpec: "TEXT",
        description: "",
        visibleToLLM: true,
        dynamicEnumSettings: {
          type: "EXHAUSTIVE",
          topK: 10
        }
      },
    ],
  },
  {
    name: "Companies",
    columns: [
      {
        name: "movie_id",
        columnSpec: "TEXT",
        description: "",
        foreignKey: {
          table: "Movies",
          column: "id",
        },
        visibleToLLM: true,
      },
      {
        name: "company_id",
        columnSpec: "INTEGER",
        description: "",
        visibleToLLM: true,
      },
      {
        name: "company_name",
        columnSpec: "TEXT",
        description: "",
        visibleToLLM: true,
        dynamicEnumSettings: {
          type: "EXHAUSTIVE",
          topK: 20
        }
      },
    ],
  },
];

export function movieToRows(movie: Movie): [any[][], any[][], any[][]] {
  const moviesData: any[][] = [];
  const genresData: any[][] = [];
  const companiesData: any[][] = [];

  moviesData.push([
    movie.id || '',
    movie.adult || 'False',
    parseInt(movie.budget) || 0,
    movie.imdb_id || '',
    movie.original_language || 'en',
    movie.original_title || '',
    movie.overview || '',
    parseFloat(movie.popularity) || 0.0,
    (movie.release_date && new Date(movie.release_date).toISOString()) || null,
    parseInt(movie.revenue) || 0,
    parseFloat(movie.runtime) || 0.0,
    movie.status || '',
    movie.tagline || '',
    movie.title || '',
    parseFloat(movie.vote_average) || 0.0,
    parseInt(movie.vote_count) || 0,
  ]);

  // Prepare Genres data
  if (movie.genres) {
    movie.genres.forEach((genre) => {
      genresData.push([movie.id || '', genre.id || 0, genre.name || '']);
    });
  }

  // Prepare Companies data
  if (movie.production_companies) {
    movie.production_companies.forEach((company) => {
      companiesData.push([
        movie.id || '',
        company.id || 0,
        company.name || '',
      ]);
    });
  }

  return [moviesData, genresData, companiesData];
}
